import io::{self, puts}

-- With defaults
Vec2D := data Vec2D(
	x: f64 = 0,
	y: f64 = 0
)

Vec3D := data Vec3D(
	x: f64,
	y: f64,
	z: f64
)

-- Self key-word allows use of `.' operator.
add(self: Vec2D, other: Vec2D): Vec2D
	= Vec2D(self.x + other.x, self.y + other.y)

add(self: Vec3D, other: Vec3D): Vec3D
	= Vec3D(self.x + other.x, self.y + other.y, self.z + other.z)

-* Reminder: How to denote pointers *-
-*-
 * ptr : &[T]  signifies a fat pointer to many T,
 * ptr : &T    signifies a thin regualr pointer to T,
 * ptr : T?    signifies a nullable pointer to T.
-*-
-*-
 * ptr[] : T  signifies a fat pointer to many T,
 * *ptr  : T  signifies a thin regualr pointer to T,
 *  ptr? : T  signifies a nullable pointer to T.
-*-
main(argv[][]: byte): u0 = {
	puts("Hello, World.")

	u_1 = Vec2D(x = 4, y = 5)
	u_2 = Vec2D(x = 1, y = 9)
	assert(u_1.add(u_2) == Vec2D(5, 14))

	v_1 = Vec3D(1, 2, 3)
	v_2 = Vec3D(5, 4, 3)
	assert(v_1.add(v_2) == Vec3D(x = 6, y = 6, z = 6))

	exit(0)
}
